/* Prob 1: What is wrong with the following */

// a
class Pokemon {
	int level;
	string name;
}; 

int main()
{
	Pokemon mp;
	mp.name = "Bulbasaur";
	mp.level = 10000;
}
///////////////////////////

//b
int *p = new int;
int j = 7;
p = &j;
//////////////////////////

//c
double a = 10;
int *aptr = &a;
//////////////////////////

//d
int * ptr , m = 100;
*ptr = m; 
//////////////////////////

//e
class YourClass
{
public:
	YourClass( int newInfo, char moreNewInfo);
	YourClass( );
	void doStuff( );
private:
	int information;
	char moreInformation;
};

// ... usage
YourClass anObject(42, 'A');
YourClass anotherObject;
YourClass yetAnotherObject(); // cant call default constructor
anObject = YourClass(99, 'B');
anObject = YourClass(); 
anObject = YourClass;



1) 
Write function that takes an array and a number n and rotates that 
array to the right n times
1,2,3,4,5,6
and n = 2 results in
5,6,1,2,3,4



2) 
Write function merge that takes two C-Strings with characters in 
alphabetical order and merges them together in alphabetical order. 
Assume you have enough space for both strings in the output string
i1: abcdef
i2: aaabbcdddghxyz
out: aaaabbbccddddefghxyz

Now, write a function interweave that weaves 2 C-strings together
i1: c saeoeadsi ai!
i2: si wsm n osskb
out: cs is awesome and so is sakib!



What does the following function do? For what inputs would it work incorrectly?

int fooBar(int* a, int n, int b) {
	int s = 0;
	int e = n-1;
	
	while(s <= e) {
		int m = (s+e)/2;
		if(b < a[m])
			e = m-1;
		else if(b > a[m])
			s = m+1;
		else
			return m;
		
	}
	return -1;
}


3)
Write a class called Stack that has space to hold 10 integers and works so that the last element you put in is the first to come out. The stack class has several functions: push, pop, size, empty, and peek. Define variables and additional functions as needed

push: return true if added to stack, else return false
pop: return true if able to pop an element. How should the element be returned?
peek: look at top of stack
size and empty: pretty straightforward


// b
void mystery(int *i, int *j) {
	int *a = i;
	
	while(*a != 5) {
		cout << *a;
		int *x = i;
		i = j;
		j = x;
		a = i+*a;
	}
}

int main() {
	int a1[] = {1, 2, 5, 6, 3, 4 ,0};
	int a2[] = {4, 6, 1, 5, 2, 0, 3};
	
	mystery(a1, a2);
}







